[
    {
        "id": "61b52b9c.c3afa4",
        "type": "debug",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 740,
        "y": 550,
        "wires": []
    },
    {
        "id": "dad5d657.927998",
        "type": "serial out",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "serial": "5d302c28.3180e4",
        "x": 740,
        "y": 490,
        "wires": []
    },
    {
        "id": "8d93424d.b7fe5",
        "type": "serial in",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "serial": "5d302c28.3180e4",
        "x": 360,
        "y": 740,
        "wires": [
            [
                "99040aad.810e88"
            ]
        ]
    },
    {
        "id": "83730c99.facee",
        "type": "file",
        "z": "7b0b5d6c.6db264",
        "name": "data file",
        "filename": "/media/usb/di1100_1.bin",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "x": 1230,
        "y": 440,
        "wires": []
    },
    {
        "id": "99040aad.810e88",
        "type": "function",
        "z": "7b0b5d6c.6db264",
        "name": "data/resp",
        "func": "//global.set(\"flag\", false);\nvar flag = global.get(\"flag\") || 0;\n//var fs = global.get(\"fileSize\");\n//var ms = global.get(\"maxSize\");\n\nif (flag != \"0\" &&  global.get(\"fileSize\") <\n    global.get(\"maxSize\")) {\n    return [ null, msg, null ];\n} else if (flag != \"0\" && global.get(\"fileSize\") >=\n    global.get(\"maxSize\")) {\n    msg.payload = global.get(\"fileSize\");\n    return [ null, null, msg ];\n}\nelse {\n    msg.topic = \"resp\";\n    return [ msg, null, null ];\n}\n",
        "outputs": 3,
        "noerr": 0,
        "x": 540,
        "y": 740,
        "wires": [
            [
                "9d7cd922.4e84f8"
            ],
            [
                "b1b9650e.581e28",
                "c6ec050e.f3b308",
                "1bc4b829.85aea8"
            ],
            [
                "7e85c64d.c40d18"
            ]
        ]
    },
    {
        "id": "abde1d79.7546b",
        "type": "file in",
        "z": "7b0b5d6c.6db264",
        "name": "SU file",
        "filename": "/media/usb/di1100.txt",
        "format": "utf8",
        "sendError": true,
        "x": 380,
        "y": 490,
        "wires": [
            [
                "d52384b5.19d218"
            ]
        ]
    },
    {
        "id": "94546b0b.f4dae8",
        "type": "inject",
        "z": "7b0b5d6c.6db264",
        "name": "startup",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "x": 100,
        "y": 490,
        "wires": [
            [
                "abde1d79.7546b"
            ]
        ]
    },
    {
        "id": "d52384b5.19d218",
        "type": "function",
        "z": "7b0b5d6c.6db264",
        "name": "parse",
        "func": "global.set(\"flag\", \"0\");\nvar index = context.get('index')||0;\nvar command = context.get('command')||\"\";\n\nif(msg.topic == \"resp\")\n//if(msg.payload  == \"resp\")\n{\n    if(command)   //.length > 0)\n    {\n        var splits = command.split('\\r');\n        if(index < (splits.length-1))\n        {\n            msg.payload = splits[index++] + '\\r';\n            context.set('index',index);\n            return msg;\n        }\n        else\n        {\n            command = null;\n            context.set('command',command);\n        }\n    \n    }\n    msg.topic = null;\n    //msg.payload = command;\n    //return msg;\n}\nelse\n{\n    command = msg.payload;\n    command = command.replace(/\\r\\n|\\n/g,'\\r');\n    context.set('command',command);\n    index = 0;\n    var splits = command.split('\\r');\n    msg.payload = splits[index++] + '\\r';    \n    context.set('index',index);\n    return msg;\n}\n   \n",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 490,
        "wires": [
            [
                "dad5d657.927998",
                "61b52b9c.c3afa4"
            ]
        ]
    },
    {
        "id": "54a9c9b.a273338",
        "type": "inject",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "topic": "",
        "payload": "start",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 100,
        "y": 590,
        "wires": [
            [
                "9ef44bdb.6b2548"
            ]
        ]
    },
    {
        "id": "9ef44bdb.6b2548",
        "type": "function",
        "z": "7b0b5d6c.6db264",
        "name": "add cr",
        "func": "msg.payload += '\\r';\nif (msg.payload == \"start\\r\") {\n    global.set(\"flag\", \"1\")\n    global.set(\"maxSize\", 40000000);\n    global.set(\"fileSize\", 0);\n} else if (msg.payload == \"stop\\r\") {\n    global.set(\"flag\", \"0\");\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 590,
        "wires": [
            [
                "dad5d657.927998"
            ]
        ]
    },
    {
        "id": "fb5b0bbd.c63dc8",
        "type": "inject",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "topic": "",
        "payload": "stop",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 90,
        "y": 650,
        "wires": [
            [
                "9ef44bdb.6b2548",
                "65bb7dc4.74b5e4"
            ]
        ]
    },
    {
        "id": "148ef96c.82bc47",
        "type": "debug",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 840,
        "y": 780,
        "wires": []
    },
    {
        "id": "b1b9650e.581e28",
        "type": "function",
        "z": "7b0b5d6c.6db264",
        "name": "data count",
        "func": "var datacount;\n// var datacount = context.get('datacount')||0;\nif (msg.topic === \"trigger\") \n{\n    context.set('state',true);\n    return null;\n}\nif (global.get(\"flag\") != \"0\") {\n    if(global.get(\"fileSize\") < \n       global.get(\"maxSize\")) {\n        datacount = global.get(\"fileSize\");\n        datacount += msg.payload.length;\n        msg.payload = datacount.toString();\n        global.set(\"fileSize\", datacount);\n        return msg;\n    }\n    else {\n        return null;\n    }\n}\n\nreturn null;\n\n// datacount += msg.payload.length;\n// context.set('datacount',datacount);\n// msg.payload = datacount.toString();\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1030,
        "y": 390,
        "wires": [
            [
                "fb415262.6a6e7"
            ]
        ]
    },
    {
        "id": "d31b3c45.b3c58",
        "type": "ui_text",
        "z": "7b0b5d6c.6db264",
        "group": "1e4d21ad.83a6de",
        "order": 2,
        "width": "3",
        "height": "2",
        "name": "di1100_1",
        "label": "count1",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1570,
        "y": 160,
        "wires": []
    },
    {
        "id": "656692f3.1cd14c",
        "type": "ui_template",
        "z": "7b0b5d6c.6db264",
        "group": "d7c9c257.bc9d9",
        "name": "DATAQ Chart.js",
        "order": 9,
        "width": "8",
        "height": "8",
        "format": "<!-- See the read me comment node. Colin Law's original notes follow -->\n\n<!--\nA node-red Dashboard UI template to draw charts using chart.js\nBefore use download the file Chart.bundle.min.js from chartjs.org and \nsave in an appropriate folder (e.g. .node-red/static). \nIn settings.js set httpStatic to the full path of that folder and restart node-red.\nMake sure that the options for 'Pass through messages' and 'Add output messages' \nin this node are cleared.\nFor basic use set the id and size you want in the canvas tag and set chartID to the id\nSetup chartDef as required for your chart (see the chart.js docs)\nIn addition, for each dataset specify in chartDef the message topic that you will use for that channel.\nTo (optionally) provide the chart with a one-off set of data send the node a message with:\nmsg.action = \"load\"\nmsg.payload = [\n{topic: \"mytopic1\", data: [{x: x1,y:y2},{x:x2,y:y2},...]},\n{topic: \"mytopic2\", data: [{x: x1,y:y2},{x:x2,y:y2},...]},\n...]\nWhere mytopic1 and mytopic2 are the the topics specified in the chartDef\n\nTo provide the chart with data incrementally (for a time series for example)\nsend it messages of the form\n{topic: \"mytopic1\", payload: {x:xvalue,y:yvalue}}\nThe chart will be updated as each sample is provided.\nTo limit the growth of the chart set chartMaxPoints and/or chartTimeSpan in the Chart Helper node\nas described at the head of that node.\nIf you find that chart seems to flicker and scroll bars come and go then try \nsetting a size other than auto in the Size specification for this node.\n\nFor Bar charts the x value is the label for the bar and the y value is the bar value\n\nNote that since the chart samples are stored in the browser then the chart will be cleared each\ntime the browser is refreshed (and will be clear on initially opening the view). In order to \nprovided persistency over browser opening and refresh this node may be used in conjunction with\nthe Chart Helper function node.  Details for its use are in the source of that node.\n\nIf your flow includes more that one instance of this script then the line fetching \nChart.bundle.min.js need only be included in one of them\n-->\n\n<script src=\"/Chart.bundle.min.js\"></script>\n<canvas id=\"myChartSimple1\" width=\"1000\" height=\"1000\"></canvas>\n<script>\n(function() {\n    var chartID = \"myChartSimple1\";           // set this to the id you have specified in the canvas tag above\n    // setup the chart definition as defined in the chart.js documentation, in addition setting up the topic\n    // for each channel\n    var chartDef = {\n        type: 'line',\n        data: {\n            datasets: [{\n                topic: \"Sin\",    // used here not by chart.js\n                label: \"Sin\",\n                yAxisID: \"1\",\n                fill: false,\n                lineTension: 0,\n                borderColor: \"#0000ff\",\n                pointRadius: 0,\n                pointHoverRadius: 0,\n                pointBorderColor: \"#0000ff\",\n                pointBackgroundColor: \"#0000ff\",\n                backgroundColor:  \"#0000ff\",\n                borderWidth: 1,\n                data: []  // data is written here later\n            }, {\n                topic: \"Triangle\",    // used here not by chart.js\n                label: \"Triangle\",\n                yAxisID: \"2\",\n                fill: false,\n                lineTension: 0,\n                borderColor: \"#ff0000\",\n                pointRadius: 0,\n                pointHoverRadius: 0,\n                pointBorderColor: \"#ff0000\",\n                pointBackgroundColor: \"#ff0000\",\n                backgroundColor:  \"#ff0000\",\n                borderWidth: 1,\n                data: []  // data is written here later\n            }]\n        },\n        options: {\n            scales: {\n                xAxes: [{\n                    type: 'linear',\n                    position: 'bottom'\n                    }\n                ],\n                yAxes: [{\n                    id: \"1\",\n                    ticks: {\n                        min: -1,\n                        max: 1,\n                        stepSize: 0.2\n                    }\n                }, {\n                    id: \"2\",\n                    ticks: {\n                        min: -1,\n                        max: 1,\n                        stepSize: .2\n                    }\n                }]\n            },\n            animation: {\n                duration: 0\n            }\n        }\n    }\n        \n/***** You shouldn't normally need to change anything below here *****/    \n    var myChart = null;\n    var loaded = false;     // indicates whether we have already had a load action\n    var chartTimeSpan;\n    var chartMaxPoints;\n\n    function doChart(msg, scope) {\n        if (!myChart) {\n            // chart does not exist so load the data and create it\n            var ctx = document.getElementById(chartID);\n            myChart = new Chart(ctx, chartDef);     \n        }\n        // chart already exists, update it\n        var datasets = myChart.data.datasets;\n        // is this a load or preload action?\n        if (msg.action === \"load\" || msg.action === \"preload\") {\n            // yes, do not allow preload if we have already had a load\n            // so do it if this is a load or we have not previously had a load\n            if (msg.action === \"load\" || !loaded) {\n                // pick up chartTimeSpan and chartMaxPoints if they have been provided\n                if (typeof msg.chartTimeSpan != 'undefined') {\n                    chartTimeSpan = msg.chartTimeSpan;\n                }\n                if (typeof msg.chartMaxPoints != 'undefined') {\n                    chartMaxPoints = msg.chartMaxPoints;\n                }\n                    \n                // replace existing data for matching topics\n                for (var j = 0; j < msg.payload.length; j++) {\n                    var topic = msg.payload[j].topic;\n                    // find it in the chart\n                    for (var i = 0; i < datasets.length; i++) {\n                        if (datasets[i].topic == topic) {\n                            // if stripping old samples by time is required then ensure the x value is Date\n                            if (chartTimeSpan > 0 ) {\n                                var data = msg.payload[j].data;\n                                for (var k = 0; k < data.length; k++) {\n                                    if (typeof data[k].x === \"string\") {\n                                        data[k].x = new Date(data[k].x);\n                                    }\n                                }\n                            }\n                            if (chartDef.type !== \"bar\") {\n                                datasets[i].data = msg.payload[j].data;\n                            } else {\n                                // bar chart so x values must go to labels and y values to dataset\n                                datasets[i].data = [];\n                                myChart.data.labels = [];\n                                var data = msg.payload[j].data;\n                                for (var k = 0; k < data.length; k++) {\n                                    datasets[i].data.push(data[k].y);\n                                    myChart.data.labels.push(data[k].x);\n                                }\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            if (msg.action === \"load\") loaded = true;\n            myChart.update();\n        } else {\n            // does the topic match one of the datasets?\n            for (var i = 0; i < datasets.length; i++) {\n                if (datasets[i].topic == msg.topic) {\n                    // if stripping old samples by time is required then ensure the x value is Date\n                    if (chartTimeSpan > 0 && typeof msg.payload.x === \"string\") {\n                        msg.payload.x = new Date(msg.payload.x);\n                    }\n                    if (chartDef.type !== \"bar\") {\n                        datasets[i].data.push(msg.payload);\n                    } else {\n                         // bar chart so x value must go to labels and y value to dataset\n                        datasets[i].data.push(msg.payload.y);\n                        myChart.data.labels.push(msg.payload.x);\n                    }\n                    myChart.update();\n                    break;\n                }\n            }\n        }\n        // strip off samples older than now\n        // charTimeSpan == 0 implies don't do it\n        var shifted = false;\n        if (chartTimeSpan > 0) {\n            var now = new Date();\n            var oldestTimeAllowed = now - chartTimeSpan;\n            for (var i = 0; i < datasets.length; i++) {\n                dataset = datasets[i];\n                while(dataset.data[0] && getTime(dataset.data[0].x) < oldestTimeAllowed) {\n                    dataset.data.shift();\n                    shifted = true;\n                }\n            }\n        }\n        // strip samples off the front if there are now too many\n        // charTimeSpan == 0 implies don't do it\n        if (chartMaxPoints > 0) {\n            for (var i = 0; i < datasets.length; i++) {\n                dataset = datasets[i];\n                while(dataset.data.length > chartMaxPoints) {\n                    dataset.data.shift();\n                    shifted = true;\n                }\n            }\n        }\n        if (shifted) {\n            myChart.update();\n        }\n    };\n\n    // gets the time of an x value, works for strings or Date types\n    function getTime(x) {\n        if (typeof x === \"string\") x = new Date(x);\n        return x.getTime();\n    }\n    \n    // builds the preload message for sending back to the chart helper\n    function preloadMsg() {\n        var preMsg = {action: \"preload\", payload: \"preload\"};\n        // build array of topics in chart\n        var topics = [];\n        for (var i=0; i<chartDef.data.datasets.length; i++) {\n            topics.push(chartDef.data.datasets[i].topic);\n        }\n        preMsg.topics = topics;\n        // has the chart already been created\n        if (myChart) {\n            preMsg.lastXValue = 1;\n        } else {\n            preMsg.lastXValue = 0;\n        }\n        return preMsg;\n    }\n\n    (function(scope) {\n        // this code gets run when the a view is opened on the node in the browser\n        // send a preload message back to node red to ask it send\n        // us a complete set of data. Pass down max points and time span to the helper node for it to use\n        // plus an array of the topics of interest\n        scope.send( preloadMsg() );\n        \n        scope.$watch('msg', function(msg) {\n            if (msg) {\n                doChart(msg, scope);\n            }\n        });\n    })(scope);\n})();\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "templateScope": "local",
        "x": 720,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "61432a9d.372684",
        "type": "inject",
        "z": "7b0b5d6c.6db264",
        "name": "Load Data Set",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 240,
        "y": 1090,
        "wires": [
            [
                "26ebee9f.3113b2"
            ]
        ]
    },
    {
        "id": "26ebee9f.3113b2",
        "type": "function",
        "z": "7b0b5d6c.6db264",
        "name": "Pre-load test data",
        "func": "\n/* This function creates a two data sets, with different topics,\n   the same x values and different y values*/\n\n// Change the scale factor each time.\nvar scale = context.get('scale') || 0;\nvar firstTime = context.get('firstTime') || 0;\nvar dataIndex = context.get('dataIndex') || 0;\n\nvar dataPoints1 = context.get('dataPoints1')|| [];\n// store the value back\ncontext.set('dataPoints1',dataPoints1);\n\nvar dataPoints2 = context.get('dataPoints2')|| [];\n// store the value back\ncontext.set('dataPoints2',dataPoints2);\n\nif(scale === 0)\n{\n    scale = 10;\n    context.set('scale', scale);\n}\nmsg.payload = [];       // This will be an array of {topic, data} objects\nvar numPoints = 101;     // We will create one more than this.\nif(firstTime === 0)\n{\n    firstTime = 1;\n    context.set('firstTime', firstTime);\n    //var dataPoints1 = [];   // These will be the first array of data points \n    //var dataPoints2 = [];   // These will be the second array of data points \n\n    // For the first data set create a sine wave\n    for (var i=0; i<numPoints; i++) {\n        var point = {};\n        point.x = i;\n        point.y = Math.sin(2 * 3.14 * (i/numPoints)) * scale/10;\n        // build the data array    \n        dataPoints1.push(point);\n    }\n    context.set('dataPoints1',dataPoints1);\n    \n    // For the second data set create a triangle\n    for (var i=0; i<numPoints; i++) {\n        var point = {};\n        point.x = i;\n        point.y = Math.cos(2 * 3.14 * (i/numPoints)) * scale/10;\n        // build the data array    \n        dataPoints2.push(point);\n    }\n    context.set('dataPoints2',dataPoints2);\n\n    \n}\nelse\n{\n    /*\n    for (var i=0; i<=10; i++) {\n        var lastPoint = {};\n        lastPoint[i].x = i;\n        lastPoint[i].y = dataPoints1[i].y;\n    }\n    for (var i=0; i<=(numPoints - 10); i++) {\n        dataPoints1[i].x = i+10;\n        dataPoints1[i].y = dataPoints1[i+10].y;\n    }\n    \n    var j = 0;\n    for (var i=numPoints - 10; i<=(numPoints-1); i++) {\n        dataPoints1[i].x = i;\n        dataPoints1[i].y = lastPoints1[j++].y;\n    }\n    */\n    var lastPoint = {};\n    lastPoint = dataPoints1[0];\n    for (var i=0; i<(numPoints - 1); i++) {\n        dataPoints1[i].x = i;\n        dataPoints1[i].y = dataPoints1[i+1].y;\n    }       \n    dataPoints1[i].x = i;\n    dataPoints1[i].y = lastPoint.y;\n\n    context.set('dataPoints1',dataPoints1);\n    \n    lastPoint = dataPoints2[0];\n    for (var i=0; i<(numPoints - 1); i++) {\n        dataPoints2[i].x = i;\n        dataPoints2[i].y = dataPoints2[i+1].y;\n    }       \n    dataPoints2[i].x = i;\n    dataPoints2[i].y = lastPoint.y;\n}\n    context.set('dataPoints2',dataPoints2);\n\nmsg.action = \"load\";    // This instructs the chart node to paint the data\n\n// The payload is an array of two {topic, data} objects\nmsg.payload = [{topic: \"Sin\", data: dataPoints1},\n                {topic: \"Triangle\", data: dataPoints2}];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 496,
        "y": 1120,
        "wires": [
            [
                "656692f3.1cd14c"
            ]
        ]
    },
    {
        "id": "d6a3e260.4142",
        "type": "inject",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": ".1",
        "crontab": "",
        "once": false,
        "x": 245,
        "y": 1145,
        "wires": [
            [
                "26ebee9f.3113b2"
            ]
        ]
    },
    {
        "id": "8316a3ac.68da3",
        "type": "inject",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "topic": "",
        "payload": "\"flag\"",
        "payloadType": "global",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 230,
        "y": 1020,
        "wires": [
            [
                "326de390.0fd6dc"
            ]
        ]
    },
    {
        "id": "8c701a47.0262e8",
        "type": "ui_gauge",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "group": "73bd1088.0b257",
        "order": 1,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "Channel 1",
        "label": "Volts (V)",
        "format": "{{value}}",
        "min": "-10",
        "max": "10",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1580,
        "y": 600,
        "wires": []
    },
    {
        "id": "88ec3703.62f6a8",
        "type": "ui_gauge",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "group": "73bd1088.0b257",
        "order": 2,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "Channel 2",
        "label": "units",
        "format": "{{value}}",
        "min": "-10",
        "max": "10",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1580,
        "y": 640,
        "wires": []
    },
    {
        "id": "63f8fd4c.91b7c4",
        "type": "ui_gauge",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "group": "d28e536f.c20e1",
        "order": 3,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "Channel 3",
        "label": "Volts (V)",
        "format": "{{value}}",
        "min": "-10",
        "max": "10",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1580,
        "y": 680,
        "wires": []
    },
    {
        "id": "48de37c8.dc0fe8",
        "type": "ui_gauge",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "group": "d28e536f.c20e1",
        "order": 4,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "Channel 4",
        "label": "Volts (V)",
        "format": "{{value}}",
        "min": "-10",
        "max": "10",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1580,
        "y": 720,
        "wires": []
    },
    {
        "id": "c5daa045.25934",
        "type": "ui_gauge",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "group": "318cf9ab.b307b6",
        "order": 5,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "Channel 5",
        "label": "Volts (V)",
        "format": "{{value}}",
        "min": "-10",
        "max": 10,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1580,
        "y": 760,
        "wires": []
    },
    {
        "id": "5a085a4b.7b0bd4",
        "type": "ui_gauge",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "group": "318cf9ab.b307b6",
        "order": 6,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "Channel 6",
        "label": "Volts (V)",
        "format": "{{value}}",
        "min": "-10",
        "max": 10,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1580,
        "y": 800,
        "wires": []
    },
    {
        "id": "f00535b0.a812e8",
        "type": "ui_gauge",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "group": "6761394.17d2fc8",
        "order": 7,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "Channel 7",
        "label": "Volts (V)",
        "format": "{{value}}",
        "min": "-10",
        "max": 10,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1580,
        "y": 840,
        "wires": []
    },
    {
        "id": "3b4268b4.e0e3f8",
        "type": "ui_gauge",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "group": "6761394.17d2fc8",
        "order": 8,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "Channel 8",
        "label": "Volts (V)",
        "format": "{{value}}",
        "min": "-10",
        "max": 10,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1580,
        "y": 880,
        "wires": []
    },
    {
        "id": "7b70e493.0b344c",
        "type": "function",
        "z": "7b0b5d6c.6db264",
        "name": "Map 1",
        "func": "var state = context.get('state')||false;\n\nif (msg.topic === \"trigger\") \n{\n    context.set('state',true);\n    return [ null, null, null, null ];\n}\nelse\n{\n    if(state)\n    {\n        context.set('state',false);\n\n        var sep2 = msg.payload;\n\n        var msg1 = { payload: sep2[0] };\n        var msg2 = { payload: sep2[1] };\n        var msg3 = { payload: sep2[2] };\n        var msg4 = { payload: sep2[3] };\n\n        return [msg1, msg2, msg3, msg4];\n    }\n    else\n    {\n        return [ null, null, null, null ];\n    }\n}\n    ",
        "outputs": 4,
        "noerr": 0,
        "x": 1320,
        "y": 810,
        "wires": [
            [
                "8c701a47.0262e8"
            ],
            [
                "88ec3703.62f6a8"
            ],
            [
                "63f8fd4c.91b7c4"
            ],
            [
                "48de37c8.dc0fe8"
            ]
        ]
    },
    {
        "id": "1bc4b829.85aea8",
        "type": "function",
        "z": "7b0b5d6c.6db264",
        "name": "Split",
        "func": "var str = msg.payload;\n\nvar sep = str.split('\\r');\nmsg.payload = sep[0].split(\",\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1020,
        "y": 810,
        "wires": [
            [
                "7b70e493.0b344c",
                "23e436f9.8a963a"
            ]
        ]
    },
    {
        "id": "23e436f9.8a963a",
        "type": "function",
        "z": "7b0b5d6c.6db264",
        "name": "Map 2",
        "func": "var sep2 = msg.payload;\n/*\nvar sep = str.split('\\r');\nvar sep2 = sep[0].split(\",\");\n*/\n\nvar msg5 = { payload: sep2[4] };\nvar msg6 = { payload: sep2[5] };\nvar msg7 = { payload: sep2[6] };\nvar msg8 = { payload: sep2[7] };\n\n\nreturn [msg5, msg6, msg7, msg8];",
        "outputs": 4,
        "noerr": 0,
        "x": 1320,
        "y": 960,
        "wires": [
            [
                "c5daa045.25934"
            ],
            [
                "5a085a4b.7b0bd4"
            ],
            [
                "f00535b0.a812e8"
            ],
            [
                "3b4268b4.e0e3f8"
            ]
        ]
    },
    {
        "id": "65bb7dc4.74b5e4",
        "type": "function",
        "z": "7b0b5d6c.6db264",
        "name": "Clear Meters",
        "func": "msg.payload = -10;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1060,
        "y": 880,
        "wires": [
            [
                "8c701a47.0262e8",
                "88ec3703.62f6a8",
                "63f8fd4c.91b7c4",
                "48de37c8.dc0fe8",
                "c5daa045.25934",
                "5a085a4b.7b0bd4",
                "f00535b0.a812e8",
                "3b4268b4.e0e3f8"
            ]
        ]
    },
    {
        "id": "e3605d37.10a4c",
        "type": "inject",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "topic": "trigger",
        "payload": "",
        "payloadType": "str",
        "repeat": ".5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 1050,
        "y": 960,
        "wires": [
            [
                "7b70e493.0b344c",
                "23e436f9.8a963a"
            ]
        ]
    },
    {
        "id": "98c54e47.adca2",
        "type": "inject",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "topic": "",
        "payload": "Clear_1",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 560,
        "y": 20,
        "wires": [
            [
                "d705263b.9721e8",
                "17a62f20.54d2f1"
            ]
        ]
    },
    {
        "id": "d705263b.9721e8",
        "type": "file",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "filename": "/media/usb/di1100_1.bin",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "x": 880,
        "y": 20,
        "wires": []
    },
    {
        "id": "c6ec050e.f3b308",
        "type": "switch",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "property": "\"flag\"",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "8",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 1030,
        "y": 580,
        "wires": [
            [
                "83730c99.facee"
            ],
            [
                "e8cd528e.53a27"
            ],
            [
                "b34036b3.1799b8"
            ],
            [
                "f9b24e65.14761"
            ],
            [
                "78e06bad.68ac44"
            ],
            [
                "80d2b444.3a1fa8"
            ],
            [
                "43c10b7a.e9c5d4"
            ],
            [
                "94ec97e0.7d8718"
            ]
        ]
    },
    {
        "id": "7e85c64d.c40d18",
        "type": "function",
        "z": "7b0b5d6c.6db264",
        "name": "Change Flag",
        "func": "setTimeout(function(){\n    var num = parseInt(global.get(\"flag\"));\n    num += 1;\n    //global.set(\"flag\", num.toString());\n    global.set(\"fileSize\", 0);\n    global.set(\"flag\", num.toString());\n}, 0.1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "e8cd528e.53a27",
        "type": "file",
        "z": "7b0b5d6c.6db264",
        "name": "data file 2",
        "filename": "/media/usb/di1100_2.bin",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 1230,
        "y": 480,
        "wires": []
    },
    {
        "id": "326de390.0fd6dc",
        "type": "ui_text",
        "z": "7b0b5d6c.6db264",
        "group": "acc993b0.229d6",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Flag",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 480,
        "y": 1020,
        "wires": []
    },
    {
        "id": "b34036b3.1799b8",
        "type": "file",
        "z": "7b0b5d6c.6db264",
        "name": "data file 3",
        "filename": "/media/usb/di1100_3.bin",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 1230,
        "y": 520,
        "wires": []
    },
    {
        "id": "f9b24e65.14761",
        "type": "file",
        "z": "7b0b5d6c.6db264",
        "name": "data file 4",
        "filename": "/media/usb/di1100_4.bin",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 1230,
        "y": 560,
        "wires": []
    },
    {
        "id": "c1f8bbd9.88eb48",
        "type": "inject",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "topic": "",
        "payload": "Clear_2",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 560,
        "y": 60,
        "wires": [
            [
                "86a54b2d.ea9fa8",
                "17a62f20.54d2f1"
            ]
        ]
    },
    {
        "id": "86a54b2d.ea9fa8",
        "type": "file",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "filename": "/media/usb/di1100_2.bin",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "x": 880,
        "y": 60,
        "wires": []
    },
    {
        "id": "716d9f7f.b1c36",
        "type": "inject",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "topic": "",
        "payload": "Clear_3",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 560,
        "y": 100,
        "wires": [
            [
                "8b3bc123.6b45e",
                "17a62f20.54d2f1"
            ]
        ]
    },
    {
        "id": "8b3bc123.6b45e",
        "type": "file",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "filename": "/media/usb/di1100_3.bin",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "x": 880,
        "y": 100,
        "wires": []
    },
    {
        "id": "1af56924.4b5337",
        "type": "inject",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "topic": "",
        "payload": "Clear_4",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 560,
        "y": 140,
        "wires": [
            [
                "b60fb967.7b5c98",
                "17a62f20.54d2f1"
            ]
        ]
    },
    {
        "id": "b60fb967.7b5c98",
        "type": "file",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "filename": "/media/usb/di1100_4.bin",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "x": 880,
        "y": 140,
        "wires": []
    },
    {
        "id": "9d7cd922.4e84f8",
        "type": "delay",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 620,
        "y": 630,
        "wires": [
            [
                "d52384b5.19d218",
                "148ef96c.82bc47"
            ]
        ]
    },
    {
        "id": "825de793.8758a8",
        "type": "ui_text",
        "z": "7b0b5d6c.6db264",
        "group": "1e4d21ad.83a6de",
        "order": 3,
        "width": "3",
        "height": "2",
        "name": "di1100_2",
        "label": "count2",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1570,
        "y": 200,
        "wires": []
    },
    {
        "id": "1a7e3f84.7d0aa",
        "type": "ui_text",
        "z": "7b0b5d6c.6db264",
        "group": "1e4d21ad.83a6de",
        "order": 4,
        "width": "3",
        "height": "2",
        "name": "di1100_3",
        "label": "count3",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1570,
        "y": 240,
        "wires": []
    },
    {
        "id": "d86c6489.7ef308",
        "type": "ui_text",
        "z": "7b0b5d6c.6db264",
        "group": "1e4d21ad.83a6de",
        "order": 5,
        "width": "3",
        "height": "2",
        "name": "di1100_4",
        "label": "count4",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1570,
        "y": 280,
        "wires": []
    },
    {
        "id": "17a62f20.54d2f1",
        "type": "function",
        "z": "7b0b5d6c.6db264",
        "name": "Empty files",
        "func": "switch(msg.payload) {\n    case \"Clear_1\":\n        msg.payload = \"0\";\n        return [msg,null,null,null,\n                null,null,null,null];\n    case \"Clear_2\":\n        msg.payload = \"0\";\n        return [null,msg,null,null,\n                null,null,null,null];\n    case \"Clear_3\":\n        msg.payload = \"0\";\n        return [null,null,msg,null,\n                null,null,null,null];\n    case \"Clear_4\":\n        msg.payload = \"0\";\n        return [null,null,null,msg,\n                null,null,null,null];\n    case \"Clear_5\":\n        msg.payload = \"0\";\n        return [null,null,null,null,\n                msg,null,null,null];\n    case \"Clear_6\":\n        msg.payload = \"0\";\n        return [null,null,null,null,\n                null,msg,null,null];\n    case \"Clear_7\":\n        msg.payload = \"0\";\n        return [null,null,null,null,\n                null,null,msg,null];\n    case \"Clear_8\":\n        msg.payload = \"0\";\n        return [null,null,null,null,\n                null,null,null,msg];\n}\nreturn [null,null,null,null,\n        null,null,null,null];",
        "outputs": 8,
        "noerr": 0,
        "x": 1270,
        "y": 130,
        "wires": [
            [
                "d31b3c45.b3c58"
            ],
            [
                "825de793.8758a8"
            ],
            [
                "1a7e3f84.7d0aa"
            ],
            [
                "d86c6489.7ef308"
            ],
            [
                "7ba8931.63a276c"
            ],
            [
                "2b02ee79.378842"
            ],
            [
                "1c6fb40e.b5e22c"
            ],
            [
                "b8cf1feb.fa2d3"
            ]
        ]
    },
    {
        "id": "fb415262.6a6e7",
        "type": "switch",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "property": "\"flag\"",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "8",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 1280,
        "y": 290,
        "wires": [
            [
                "d31b3c45.b3c58"
            ],
            [
                "825de793.8758a8"
            ],
            [
                "1a7e3f84.7d0aa"
            ],
            [
                "d86c6489.7ef308"
            ],
            [
                "7ba8931.63a276c"
            ],
            [
                "2b02ee79.378842"
            ],
            [
                "1c6fb40e.b5e22c"
            ],
            [
                "b8cf1feb.fa2d3"
            ]
        ]
    },
    {
        "id": "7ba8931.63a276c",
        "type": "ui_text",
        "z": "7b0b5d6c.6db264",
        "group": "1e4d21ad.83a6de",
        "order": 0,
        "width": "3",
        "height": "2",
        "name": "di1100_5",
        "label": "count5",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1570,
        "y": 320,
        "wires": []
    },
    {
        "id": "2b02ee79.378842",
        "type": "ui_text",
        "z": "7b0b5d6c.6db264",
        "group": "1e4d21ad.83a6de",
        "order": 0,
        "width": "3",
        "height": "2",
        "name": "di1100_6",
        "label": "count6",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1570,
        "y": 360,
        "wires": []
    },
    {
        "id": "1c6fb40e.b5e22c",
        "type": "ui_text",
        "z": "7b0b5d6c.6db264",
        "group": "1e4d21ad.83a6de",
        "order": 0,
        "width": "3",
        "height": "2",
        "name": "di1100_7",
        "label": "count7",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1570,
        "y": 400,
        "wires": []
    },
    {
        "id": "b8cf1feb.fa2d3",
        "type": "ui_text",
        "z": "7b0b5d6c.6db264",
        "group": "1e4d21ad.83a6de",
        "order": 0,
        "width": "3",
        "height": "2",
        "name": "di1100_8",
        "label": "count8",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1570,
        "y": 440,
        "wires": []
    },
    {
        "id": "78e06bad.68ac44",
        "type": "file",
        "z": "7b0b5d6c.6db264",
        "name": "data file 5",
        "filename": "/media/usb/di1100_5.bin",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 1230,
        "y": 600,
        "wires": []
    },
    {
        "id": "80d2b444.3a1fa8",
        "type": "file",
        "z": "7b0b5d6c.6db264",
        "name": "data file 6",
        "filename": "/media/usb/di1100_6.bin",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 1230,
        "y": 640,
        "wires": []
    },
    {
        "id": "43c10b7a.e9c5d4",
        "type": "file",
        "z": "7b0b5d6c.6db264",
        "name": "data file 7",
        "filename": "/media/usb/di1100_7.bin",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 1230,
        "y": 680,
        "wires": []
    },
    {
        "id": "94ec97e0.7d8718",
        "type": "file",
        "z": "7b0b5d6c.6db264",
        "name": "data file 8",
        "filename": "/media/usb/di1100_8.bin",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 1230,
        "y": 720,
        "wires": []
    },
    {
        "id": "4f725133.a2c8",
        "type": "file",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "filename": "/media/usb/di1100_5.bin",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "x": 880,
        "y": 180,
        "wires": []
    },
    {
        "id": "8a30db53.e1c598",
        "type": "file",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "filename": "/media/usb/di1100_6.bin",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "x": 880,
        "y": 220,
        "wires": []
    },
    {
        "id": "760ad9a7.5aaee8",
        "type": "file",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "filename": "/media/usb/di1100_7.bin",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "x": 880,
        "y": 260,
        "wires": []
    },
    {
        "id": "808f038b.d4d95",
        "type": "file",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "filename": "/media/usb/di1100_8.bin",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "x": 880,
        "y": 300,
        "wires": []
    },
    {
        "id": "26e5433.0eacdbc",
        "type": "inject",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "topic": "",
        "payload": "Clear_5",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 560,
        "y": 180,
        "wires": [
            [
                "4f725133.a2c8",
                "17a62f20.54d2f1"
            ]
        ]
    },
    {
        "id": "776e3720.9e8768",
        "type": "inject",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "topic": "",
        "payload": "Clear_6",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 560,
        "y": 220,
        "wires": [
            [
                "8a30db53.e1c598",
                "17a62f20.54d2f1"
            ]
        ]
    },
    {
        "id": "2ff822aa.795c7e",
        "type": "inject",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "topic": "",
        "payload": "Clear_7",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 560,
        "y": 260,
        "wires": [
            [
                "760ad9a7.5aaee8",
                "17a62f20.54d2f1"
            ]
        ]
    },
    {
        "id": "3812a2fb.f2c92e",
        "type": "inject",
        "z": "7b0b5d6c.6db264",
        "name": "",
        "topic": "",
        "payload": "Clear_8",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 560,
        "y": 300,
        "wires": [
            [
                "808f038b.d4d95",
                "17a62f20.54d2f1"
            ]
        ]
    },
    {
        "id": "5d302c28.3180e4",
        "type": "serial-port",
        "z": "7b0b5d6c.6db264",
        "serialport": "/dev/ttyACM0",
        "serialbaud": "57600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "25",
        "bin": "false",
        "out": "time",
        "addchar": false
    },
    {
        "id": "1e4d21ad.83a6de",
        "type": "ui_group",
        "z": "",
        "name": "Home",
        "tab": "6f02ba0c.5587f4",
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "d7c9c257.bc9d9",
        "type": "ui_group",
        "z": "",
        "name": "Scrolling Chart",
        "tab": "4890688d.34c058",
        "order": 1,
        "disp": true,
        "width": "8"
    },
    {
        "id": "73bd1088.0b257",
        "type": "ui_group",
        "z": "",
        "name": "DAQ_UI_1",
        "tab": "846c724c.c80db",
        "disp": false,
        "width": "10",
        "collapse": false
    },
    {
        "id": "d28e536f.c20e1",
        "type": "ui_group",
        "z": "",
        "name": "DAQ_UI_2",
        "tab": "d99b2736.b6f8e8",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "318cf9ab.b307b6",
        "type": "ui_group",
        "z": "",
        "name": "DAQ_U_3",
        "tab": "82924faa.5893a",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "6761394.17d2fc8",
        "type": "ui_group",
        "z": "",
        "name": "DAQ_UI_4",
        "tab": "95a18e25.4f56a",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "acc993b0.229d6",
        "type": "ui_group",
        "z": "",
        "name": "Status",
        "tab": "6f02ba0c.5587f4",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "6f02ba0c.5587f4",
        "type": "ui_tab",
        "z": "",
        "name": "UI Setup",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "4890688d.34c058",
        "type": "ui_tab",
        "z": "",
        "name": "DATAQ Chart",
        "icon": "dashboard",
        "order": 6
    },
    {
        "id": "846c724c.c80db",
        "type": "ui_tab",
        "z": "",
        "name": "UI Gauge1",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "d99b2736.b6f8e8",
        "type": "ui_tab",
        "z": "",
        "name": "UI Guage2",
        "icon": "dashboard",
        "order": 3
    },
    {
        "id": "82924faa.5893a",
        "type": "ui_tab",
        "z": "",
        "name": "UI Guage3",
        "icon": "dashboard",
        "order": 4
    },
    {
        "id": "95a18e25.4f56a",
        "type": "ui_tab",
        "z": "",
        "name": "UI Guage4",
        "icon": "dashboard",
        "order": 5
    }
]
